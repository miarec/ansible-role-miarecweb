---
- name: Create release directory
  file:
    path: '{{ deploy_helper.new_release_path }}'
    state: directory
    mode: u=rwX,g=rX,o=rX

# --------------------------------------------------
# Download and extract miarecweb files into .../releases/{version}/app folder
# --------------------------------------------------

- name: Verify app directory presense
  stat:
    path: "{{ deploy_helper.new_release_path }}/app"
  register: miarecweb_app_dir_exists

- name: Download and extract source package.
  when: not miarecweb_app_dir_exists.stat.exists
  block:

    - name: Add an unfinished file, to allow cleanup on successful finalize
      file:
        path: '{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}'
        state: touch
        mode: '0644'
      when: not miarecweb_app_dir_exists.stat.exists


    - name: Download miarecweb tarball
      get_url:
        url: "{{ miarecweb_download_base_url }}/{{ miarecweb_tarball_file | replace('+', '%2b') }}"
        dest: "{{ miarecweb_download_dir }}/{{ miarecweb_tarball_file }}"
        mode: '0644'
      when: not miarecweb_app_dir_exists.stat.exists

    # unarchive must change the permissions of the destination folder when mode parameter is supplied.
    # But it behaves differently with tar.gz and zip archives.
    # When extracting tar.gz, it doesn't touch the destination folder's permissions.
    # While in case of extracting zip into something like /tmp/ with mode: 755, it overrides the permissions of /tmp to 755.
    # This step will create a direcoty specific to this role to extract files to
    - name: Create directory for extracted files
      file:
        path: "{{ miarecweb_download_dir }}/miarecweb"
        state: directory
        mode: u=rwX,g=rX,o=rX
      register: _extract_dir

    - name: Untar the source package
      unarchive:
        src: "{{ miarecweb_download_dir }}/{{ miarecweb_tarball_file }}"
        dest: "{{ _extract_dir.path }}/"
        creates: "{{ _extract_dir.path }}/miarecweb-{{ miarecweb_version }}"
        copy: false
        mode: u=rwX,g=rX,o=rX
      when: not miarecweb_app_dir_exists.stat.exists


    - name: Move app directory to releases folder
      command: mv "{{ _extract_dir.path }}/miarecweb-{{ miarecweb_version }}" "{{ deploy_helper.new_release_path }}/app"
      args:
        creates: "{{ deploy_helper.new_release_path }}/app"
      when: not miarecweb_app_dir_exists.stat.exists


# --------------------------------------------------
# Python virtual environment
# --------------------------------------------------
- name: Create python virtual environment
  shell:
    cmd: "umask 0022 && {{ python_install_dir }}/bin/python{{ python_version_base }} -m venv {{ deploy_helper.new_release_path }}/pyenv"
    creates: "{{ deploy_helper.new_release_path }}/pyenv"
  register: create_pyenv

- name: Upgrade PIP and setuptools    # noqa: no-handler
  shell:
    cmd: "umask 0022 && {{ deploy_helper.new_release_path }}/pyenv/bin/python -m pip install --upgrade pip setuptools"
    chdir: "{{ deploy_helper.new_release_path }}/app"
  changed_when: true
  when: create_pyenv.changed

- name: Install dependencies (requirements.txt)
  pip:
    requirements: requirements.txt
    executable: "{{ deploy_helper.new_release_path }}/pyenv/bin/pip"
    chdir: "{{ deploy_helper.new_release_path }}/app"
    umask: "0022"
  environment:
    # We need to add 'pg_config' to PATH. Otherwise psycopg2 build fails
    PATH: "{{ postgresql_bin_directory }}:{{ ansible_env.PATH }}"

- name: Install MiaRecWeb
  shell:
    cmd: "umask 0022 && {{ deploy_helper.new_release_path }}/pyenv/bin/pip install -e ."
    chdir: "{{ deploy_helper.new_release_path }}/app"
    # creates: "{{ deploy_helper.new_release_path }}/pyenv/lib/python{{ python_version_base }}/site-packages/miarecweb-{{ miarecweb_version }}.dist-info"    # This file was not created when installing version `2024.2.7.7` and using python 3.11.7
    creates: "{{ deploy_helper.new_release_path }}/pyenv/lib/python{{ python_version_base }}/site-packages/miarecweb.egg-link"


# --------------------------------------------------
# Configuration file production.ini
# It must have permissions:
#   - read-only access for group "miarec"
#   - no access for other users
# --------------------------------------------------
- name: Copy production.ini file     # noqa: risky-file-permissions
  copy:
    src: "{{ deploy_helper.new_release_path }}/app/production.ini.sample"
    dest: "{{ deploy_helper.new_release_path }}/production.ini"
    force: false
    remote_src: true

# --------------------------------------------------
# When using non-root group, then the configuration file must have permissions:
#   - read-only access for group "miarec"
#   - no access for other users
# --------------------------------------------------
- name: Configure file permissions on production.ini file ("miarec" group exists)
  file:
    path: "{{ deploy_helper.new_release_path }}/production.ini"
    owner: root
    group: '{{ miarec_bin_group }}'
    mode: u=rwX,g=rX,o=
  when: miarec_bin_group != 'root'


# --------------------------------------------------
# When using root group, then the configuration file must have permissions:
#   - read-only access for other users,
#     which includes Apache service (httpd:httpd)
# --------------------------------------------------
- name: Configure file permissions on productio.ini file (no "miarec" group)
  file:
    path: "{{ deploy_helper.new_release_path }}/production.ini"
    mode: u=rwX,g=rX,o=rX
  when: miarec_bin_group == 'root'


- name: Configure production.ini file
  lineinfile:
    dest: "{{ deploy_helper.new_release_path }}/production.ini"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: '^DATABASE_HOST = '
      line: 'DATABASE_HOST = {{ miarecweb_db_host }}'
    - regexp: '^DATABASE_PORT = '
      line: 'DATABASE_PORT = {{ miarecweb_db_port }}'
    - regexp: '^DATABASE_NAME = '
      line: 'DATABASE_NAME = {{ miarecweb_db_name }}'
    - regexp: '^DATABASE_USER = '
      line: 'DATABASE_USER = {{ miarecweb_db_user }}'
    - regexp: '^DATABASE_POOL_SIZE = '
      line: 'DATABASE_POOL_SIZE = {{ miarecweb_db_pool_size }}'
    - regexp: '^DATABASE_POOL_RECYCLE = '
      line: 'DATABASE_POOL_RECYCLE = {{ miarecweb_db_pool_recycle }}'
    - regexp: '^DATABASE_POOL_USE_LIFO = '
      line: 'DATABASE_POOL_USE_LIFO = {{ miarecweb_db_pool_use_lifo }}'
    - regexp: '^REDIS_HOST = '
      line: 'REDIS_HOST = {{ miarecweb_redis_host }}'
    - regexp: '^REDIS_PORT = '
      line: 'REDIS_PORT = {{ miarecweb_redis_port }}'
    - regexp: '^REDIS_SOCKET_TIMEOUT = '
      line: 'REDIS_SOCKET_TIMEOUT = {{ miarecweb_redis_socket_timeout }}'
    - regexp: '^REDIS_SOCKET_CONNECT_TIMEOUT = '
      line: 'REDIS_SOCKET_CONNECT_TIMEOUT = {{ miarecweb_redis_socket_connect_timeout }}'
    - regexp: '^REDIS_SOCKET_KEEPALIVE = '
      line: 'REDIS_SOCKET_KEEPALIVE = {{ miarecweb_redis_socket_keepalive }}'
    - regexp: '^REDIS_HEALTH_CHECK_INTERVAL = '
      line: 'REDIS_HEALTH_CHECK_INTERVAL = {{ miarecweb_redis_health_check_interval }}'
    - regexp: '^REDIS_POOL_RECYCLE = '
      line: 'REDIS_POOL_RECYCLE = {{ miarecweb_redis_pool_recycle }}'
    - regexp: '^miarec.jobs_log_directory = '
      line: 'miarec.jobs_log_directory = {{ miarecweb_log_dir }}/jobs'
    - regexp: '^deform_mako.module_directory = '
      line: 'deform_mako.module_directory = {{ deploy_helper.new_release_path }}/cache'
    - regexp: '^miarec.sox_path = '
      line: 'miarec.sox_path = {{ sox_path }}'
  notify:
    - reload apache
    - reload celeryd
    - reload celerybeat


- name: Configure secrets in production.ini file
  lineinfile:
    dest: "{{ deploy_helper.new_release_path }}/production.ini"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: '^DATABASE_PASSWORD = '
      line: 'DATABASE_PASSWORD = {{ miarecweb_db_password }}'
    - regexp: '^miarec.secret ='
      line: 'miarec.secret = {{ miarecweb_secret }}'
  no_log: true
  notify:
    - reload apache
    - reload celeryd
    - reload celerybeat

# --------------------------------------------------
# Custom configuration settings in INI file
# --------------------------------------------------
- name: Custom production.ini file settings    # noqa: risky-file-permissions
  ini_file:
    dest: "{{ deploy_helper.new_release_path }}/production.ini"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items: "{{ miarecweb_custom_ini_settings }}"
  notify:
    - reload apache
    - reload celeryd
    - reload celerybeat

# --------------------------------------------------
# Cleanup
# --------------------------------------------------
- name: Clean up the downloaded files
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - "{{ miarecweb_download_dir }}/{{ miarecweb_tarball_file }}"
    - "{{ miarecweb_download_dir }}/{{ miarecweb_tarball_file }}.asc"
  when: miarecweb_cleanup_downloads|bool
